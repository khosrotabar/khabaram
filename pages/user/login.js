import { useState, useRef, useEffect } from "react";
import { useRouter } from "next/router";
import Cookies from "js-cookie";
import { toast } from "react-toastify";

import styles from "./login.module.css";

function Login() {
  // var inFifteenMinutes = new Date(new Date().getTime() + 1500 * 60 * 1000);
  // Cookies.set("customer", "09387070553", { expires: inFifteenMinutes });

  const notify = () =>
    toast.error("کد وارد شده نادرست است!", {
      position: "top-center",
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      className: "toaster-custom-css",
      style: {
        color: "#4B416A",
      },
    });

  const router = useRouter();
  const inputE1 = useRef(null);
  const inputE2 = useRef(null);
  const inputE3 = useRef(null);
  const inputE4 = useRef(null);
  const inputE5 = useRef(null);

  let myTimeout;

  const [inputValue, setInputValue] = useState("");
  const [isCodeSend, setIsCodeSend] = useState(false);
  const [isResendOpen, setIsResendOpen] = useState(false);
  const [loadingIo, setLoadingIo] = useState(false);
  const [loadingIo2, setLoadingIo2] = useState(false);

  const Logo = (
    <svg
      width="136"
      height="47"
      viewBox="0 0 136 47"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M135.504 25.4967C134.296 30.892 130.535 33.4071 123.517 33.3497C124.741 34.696 125.665 36.0265 127.719 35.7813C129.505 35.5726 128.896 37.0701 129.017 37.9833C129.148 39.0269 128.964 39.6843 127.609 39.7052C125.865 39.7052 124.489 39.773 124.825 37.3362C125.03 35.8282 123.528 35.2491 122.566 34.2316C122.913 41.3645 119.052 46.2329 113.148 46.2955C106.687 46.379 102.941 42.0324 103.02 34.3411C101.586 35.3847 100.362 36.3292 100.604 38.2546C100.83 40.0026 99.5534 39.6635 98.5448 39.6739C97.5363 39.6843 96.4437 39.9765 96.4437 38.2442C96.4437 36.5118 96.5592 35.3586 98.8075 35.6821C100.341 35.9013 100.851 34.3933 102.227 33.308C97.3839 33.6054 93.6229 32.6662 91.3536 28.6118C91.4272 28.09 91.091 27.443 91.6951 27.0464C91.9682 27.4795 92.2466 27.9126 92.525 28.3405C93.7715 30.2109 95.7082 31.5195 97.9173 31.9842C100.126 32.4489 102.431 32.0322 104.334 30.8242C104.89 30.4694 105.5 30.1772 105.452 29.3788C105.379 28.1683 106.23 28.2778 107.028 28.2465C107.827 28.2152 108.194 28.5753 108.152 29.4049C108.11 30.2346 108.252 31.0434 107.023 30.9703C106.13 30.9129 105.799 31.5913 105.447 32.207C104.667 33.5051 104.248 34.9854 104.232 36.4969C104.215 38.0085 104.602 39.4974 105.354 40.8119C106.105 42.1264 107.194 43.2196 108.509 43.9801C109.824 44.7406 111.319 45.1413 112.841 45.1413C114.362 45.1413 115.857 44.7406 117.172 43.9801C118.487 43.2196 119.576 42.1264 120.327 40.8119C121.079 39.4974 121.466 38.0085 121.45 36.4969C121.433 34.9854 121.014 33.5051 120.234 32.207C119.872 31.6069 119.546 30.8816 118.658 30.9494C117.513 31.0381 117.397 30.365 117.413 29.4675C117.413 28.664 117.707 28.257 118.553 28.2517C119.399 28.2465 120.192 28.1683 120.129 29.3736C120.097 29.9528 120.449 30.2815 120.906 30.6207C125.96 34.3255 133.513 31.1425 134.333 24.9488C134.9 20.7222 132.978 17.8419 129.484 15.7495L129.411 15.8121V15.7338C129.505 15.3529 129.905 15.212 130.251 15.0242C132.19 15.922 133.766 17.4465 134.72 19.3486C135.674 21.2508 135.95 23.4182 135.504 25.4967Z"
        fill="#4B416A"
      />
      <path
        d="M129.66 14.82L128.873 15.5323L128.8 15.5938V15.5169C126.929 15.1069 125.048 14.6252 123.124 15.1531C121.694 15.5425 119.954 15.8295 119.613 17.4796C119.362 18.7146 118.743 18.6428 117.873 18.6531C117.098 18.6531 116.883 18.2995 116.825 17.5974C116.768 16.6289 116.909 15.932 118.141 16.0601C118.754 16.1113 119.063 15.6758 119.377 15.2555C121.662 12.1809 121.028 7.01028 118.041 4.36605C116.474 2.99526 114.453 2.2247 112.35 2.19645C110.248 2.1682 108.206 2.88416 106.601 4.21232C103.399 6.98466 102.744 11.899 105.133 15.1941C105.484 15.6758 105.815 16.1575 106.512 16.0857C107.838 15.9576 107.56 16.9159 107.612 17.623C107.665 18.3302 107.303 18.6479 106.564 18.6479C105.825 18.6479 104.892 18.8683 104.992 17.623C105.05 16.6494 104.206 16.3624 103.545 15.9935C100.836 14.4818 96.0723 14.5279 94.1805 16.2599C90.9627 19.2116 89.139 21.7995 91.2038 26.6011C91.1199 27.1136 91.3348 27.6926 90.8631 28.1385C88.7302 24.8588 88.8717 21.5535 90.795 18.2534C92.7183 14.9532 96.2557 13.4876 101.533 13.7592C100.364 12.3397 99.3372 10.992 97.1886 11.3097C95.6636 11.5352 95.9308 10.3207 96.0042 9.50077C96.0776 8.68085 95.391 7.4971 97.1152 7.37924C99.6884 7.19988 99.8823 7.25625 100.092 9.78261C100.212 11.2226 101.517 11.6633 102.44 12.6267C102.151 9.37778 102.702 6.41072 105.06 4.00734C106.141 2.84527 107.501 1.96361 109.016 1.44133C110.532 0.919051 112.156 0.772448 113.744 1.01465C119.032 1.67571 122.323 6.3236 121.992 12.7036C123.434 11.6325 124.665 10.6077 124.34 8.60399C124.094 7.10764 125.294 7.32287 126.143 7.42536C126.992 7.52785 128.355 6.69256 128.449 8.55274C128.569 10.9766 128.611 11.0125 126.002 11.279C124.429 11.4378 123.905 12.8163 122.454 13.9591C125.31 13.4517 127.563 13.6208 129.66 14.82Z"
        fill="#4B416A"
      />
      <path
        d="M129.271 28.7632C129.424 29.2383 130.067 29.8924 129.176 30.2143C128.37 30.5106 128.449 29.6471 128.27 29.2639C126.584 25.6872 123.992 24.0266 120.279 24.2616C116.875 24.4762 114.384 26.6376 113.298 30.3063C113.246 30.4902 113.172 30.6639 113.109 30.8479C113.151 34.7261 114.689 37.6232 118.709 38.9159C119.235 39.0743 119.573 39.2889 119.346 39.8561C119.077 40.5306 118.566 40.1473 118.187 40.0196C115.648 39.1663 113.83 37.4648 112.508 35.0939C111.254 37.3371 109.595 39.013 107.24 39.8765C106.798 40.04 106.05 40.5714 105.723 39.8254C105.396 39.0794 106.213 39.0028 106.74 38.8035C110.743 37.2349 112.092 34.5677 111.57 29.315C110.433 26.8624 108.684 25.0842 105.892 24.4404C102.093 23.5616 98.5163 25.4317 96.8569 29.1821C96.6409 29.6624 96.6461 30.5464 95.8033 30.2603C94.9604 29.9741 95.5504 29.2946 95.7137 28.804C96.4091 26.7602 97.5206 25.5645 100.318 23.7711C100.408 23.1426 99.7912 23.117 99.4593 22.9076C98.2124 22.1792 97.18 21.1515 96.4618 19.9235C95.9718 19.0447 94.7496 17.6804 95.8033 17.1337C97.1097 16.4439 96.8569 18.314 97.2414 18.9885C98.0564 20.3873 99.3005 21.505 100.801 22.1863C102.301 22.8676 103.983 23.0786 105.612 22.79C107.199 22.4701 108.646 21.6848 109.757 20.5405C110.868 19.3962 111.589 17.9482 111.823 16.3928C111.996 14.8281 111.668 13.2498 110.884 11.8722C110.1 10.4946 108.898 9.38448 107.44 8.69264C107.145 8.55468 106.829 8.45249 106.534 8.32475C106.15 8.15102 105.481 8.1919 105.676 7.52254C105.87 6.85319 106.455 7.04224 106.961 7.16487C108.847 7.62985 110.743 9.27003 112.492 12.019C113.778 9.97515 115.237 8.12548 117.655 7.36415C118.182 7.19553 118.956 6.50062 119.325 7.42035C119.662 8.25833 118.682 8.19701 118.213 8.4014C114.721 9.93428 112.714 13.1533 113.246 16.4797C113.778 19.806 116.475 22.4528 119.699 22.836C123.618 23.3061 126.579 21.6199 128.207 18.0534C128.407 17.6242 128.265 16.6279 129.176 16.9498C130.088 17.2717 129.466 18.0279 129.271 18.5593C128.433 20.8331 126.637 22.2995 124.382 23.5973C126.658 24.9156 128.512 26.3923 129.271 28.7632Z"
        fill="#4B416A"
      />
      <path
        d="M129.272 28.9955C129.424 29.4757 130.066 30.1367 129.177 30.4621C128.372 30.7616 128.451 29.8889 128.272 29.5016C126.588 25.8867 123.999 24.2084 120.29 24.446C116.891 24.6629 114.402 26.8472 113.318 30.555C113.266 30.7409 113.192 30.9165 113.129 31.1024C111.708 31.4484 111.872 30.2762 111.551 29.5532C110.414 27.0745 108.667 25.2774 105.879 24.6267C102.085 23.7385 98.5124 25.6285 96.855 29.4189C96.6393 29.9043 96.6446 30.7977 95.8027 30.5085C94.9609 30.2194 95.5502 29.5325 95.7133 29.0368C96.4078 26.9712 97.518 25.7628 100.312 23.9502C100.401 23.315 99.7857 23.2892 99.4542 23.0775C98.2089 22.3414 97.1778 21.3027 96.4604 20.0617C96.0132 19.1735 94.7925 17.7947 95.8448 17.2421C97.1497 16.545 96.8971 18.435 97.2812 19.1167C98.0952 20.5304 99.3378 21.66 100.836 22.3486C102.335 23.0372 104.014 23.2504 105.642 22.9587C107.227 22.6354 108.672 21.8417 109.781 20.6852C110.891 19.5287 111.611 18.0653 111.845 16.4934C112.018 14.912 111.69 13.3169 110.907 11.9246C110.124 10.5323 108.923 9.41037 107.468 8.71117C107.173 8.57174 106.857 8.46846 106.563 8.33935C106.179 8.16378 105.51 8.20509 105.705 7.5286C105.9 6.85211 106.484 7.04318 106.989 7.16712C108.872 7.63705 110.767 9.2947 112.513 12.0729C113.797 10.0073 115.255 8.13796 117.67 7.36852C118.196 7.1981 118.969 6.4958 119.338 7.42532C119.674 8.27222 118.696 8.21025 118.227 8.41682C114.739 9.96602 112.734 13.2194 113.266 16.5811C113.797 19.9429 116.491 22.6179 119.711 23.0052C123.626 23.4803 126.583 21.7762 128.209 18.1717C128.409 17.7379 128.267 16.7309 129.177 17.0562C130.087 17.3816 129.466 18.1458 129.272 18.6829C128.435 20.9809 126.641 22.463 124.389 23.7746C126.662 25.107 128.514 26.5994 129.272 28.9955Z"
        fill="#4B416A"
      />
      <path
        d="M119.5 39.8501C119.224 40.5349 118.7 40.1458 118.311 40.0161C115.706 39.1497 113.842 37.4221 112.486 35.0149C111.2 37.2924 109.497 38.9941 107.082 39.8709C106.628 40.0369 105.86 40.5764 105.525 39.819C105.19 39.0615 106.028 38.9837 106.568 38.7814C110.675 37.1887 112.059 34.4805 111.524 29.1472C111.929 29.7854 112.275 30.4806 113.145 30.7036C113.188 34.6413 114.766 37.583 118.889 38.8955C119.365 39.0564 119.732 39.2743 119.5 39.8501Z"
        fill="#4B416A"
      />
      <path
        d="M0.262695 24.8465L1.72684 23.9519C1.93416 24.0712 2.30127 24.2714 2.82819 24.5526C3.36375 24.8337 3.99865 25.1617 4.73288 25.5366C4.94883 24.429 5.1691 23.5004 5.39369 22.7507C5.62692 21.9924 5.8947 21.3492 6.19703 20.821C6.62893 20.0542 7.16017 19.4706 7.79075 19.0702C8.42132 18.6613 9.18147 18.4568 10.0712 18.4568C10.84 18.4568 11.5224 18.6442 12.1184 19.0191C12.7144 19.3854 13.2154 19.8625 13.6214 20.4504C14.036 21.0297 14.347 21.6814 14.5543 22.4056C14.7703 23.1213 14.8783 23.8284 14.8783 24.527C14.8783 25.4812 14.7573 26.2906 14.5155 26.9551C14.2822 27.6111 13.9756 28.1436 13.5955 28.5525C13.2154 28.9614 12.7835 29.2554 12.2998 29.4343C11.8247 29.6132 11.341 29.7027 10.8486 29.7027C10.7709 29.7027 10.6715 29.6941 10.5506 29.6771C10.4297 29.6686 10.2742 29.6388 10.0841 29.5876C9.90275 29.5365 9.67816 29.4684 9.41038 29.3832C9.1426 29.2894 8.82299 29.1659 8.45156 29.0126C8.19242 28.9103 7.87713 28.7783 7.50569 28.6164C7.14289 28.446 6.75418 28.2628 6.33956 28.0669C5.92493 27.8709 5.49735 27.6665 5.05681 27.4535C4.61627 27.2405 4.193 27.0318 3.78702 26.8273C3.38967 26.6228 3.02255 26.4354 2.68567 26.265C2.34878 26.0861 2.07236 25.937 1.85641 25.8177V39.3128H0.262695V24.8465ZM6.22294 26.265C7.13857 26.708 7.88576 27.0573 8.46451 27.3129C9.0519 27.56 9.51404 27.7474 9.85092 27.8752C10.1964 27.9945 10.4383 28.0711 10.5765 28.1052C10.7234 28.1308 10.8141 28.1436 10.8486 28.1436C11.2978 28.1436 11.6779 28.0456 11.9888 27.8496C12.2998 27.6452 12.5503 27.3768 12.7403 27.0445C12.939 26.7123 13.0772 26.3289 13.155 25.8944C13.2413 25.4599 13.2845 25.0041 13.2845 24.527C13.2845 23.9903 13.2111 23.4535 13.0643 22.9168C12.9174 22.3715 12.7058 21.8859 12.4294 21.4599C12.153 21.034 11.8161 20.6889 11.4187 20.4248C11.0214 20.1522 10.5722 20.0159 10.0712 20.0159C9.56154 20.0159 9.11237 20.1224 8.72365 20.3354C8.34358 20.5483 8.00238 20.9019 7.70005 21.396C7.39772 21.8902 7.12562 22.5377 6.88375 23.3385C6.65053 24.1308 6.43025 25.1063 6.22294 26.265Z"
        fill="#4B416A"
      />
      <path
        d="M20.4286 29.6132H18.809V11.377H20.4286V29.6132Z"
        fill="#4B416A"
      />
      <path
        d="M19.7808 36.6802V35.1211H21.5818C23.6118 35.1211 25.0975 34.5972 26.039 33.5492C26.9028 32.578 27.3347 31.1254 27.3347 29.1915V20.9871H28.9285V29.1915C28.9285 31.6622 28.3065 33.528 27.0626 34.7889C25.8274 36.0498 24.0005 36.6802 21.5818 36.6802H19.7808Z"
        fill="#4B416A"
      />
      <path
        d="M37.7522 29.6132C36.7243 29.6132 35.8994 29.4939 35.2774 29.2554C34.6641 29.0168 34.1934 28.6633 33.8651 28.1947C33.5369 27.7261 33.3209 27.151 33.2173 26.4695C33.1136 25.7794 33.0618 24.9871 33.0618 24.0925V11.377H34.6814V24.0925C34.6814 24.8848 34.7073 25.5366 34.7591 26.0477C34.811 26.5589 34.9405 26.9636 35.1479 27.2618C35.3552 27.5515 35.6618 27.7559 36.0678 27.8752C36.4824 27.986 37.0439 28.0413 37.7522 28.0413H37.9336V29.6132H37.7522Z"
        fill="#4B416A"
      />
      <path
        d="M44.1238 19.3386C44.2101 19.7049 44.3052 20.1096 44.4088 20.5526C44.5125 20.9956 44.6032 21.4557 44.6809 21.9328C44.7673 22.4014 44.8407 22.8785 44.9012 23.3641C44.9616 23.8497 45.0005 24.314 45.0178 24.757V24.8337C45.0178 25.413 44.9271 25.9881 44.7457 26.5589C44.5643 27.1297 44.2965 27.6452 43.9424 28.1052C43.5882 28.5568 43.152 28.9231 42.6337 29.2043C42.124 29.4769 41.5496 29.6132 40.9104 29.6132H37.5416V28.0413H40.9104C41.325 28.0158 41.6878 27.9093 41.9988 27.7218C42.3184 27.5344 42.5819 27.2916 42.7892 26.9934C43.0051 26.6867 43.1693 26.3417 43.2815 25.9583C43.3766 25.609 43.4241 25.2512 43.4241 24.8848V24.7954C43.4154 24.3864 43.3809 23.9604 43.3204 23.5174C43.2686 23.0744 43.1995 22.6356 43.1131 22.2011C43.0354 21.7666 42.949 21.3449 42.854 20.936C42.7589 20.527 42.6682 20.1479 42.5819 19.7986L44.1238 19.3386ZM40.6901 34.2521L42.1672 32.7825L43.6962 34.2777L42.1932 35.7601L40.6901 34.2521Z"
        fill="#4B416A"
      />
      <path
        d="M50.6322 29.6132H49.0126V11.377H50.6322V29.6132Z"
        fill="#4B416A"
      />
      <path
        d="M63.2812 28.0413V24.8593C63.2639 24.1862 63.1991 23.5643 63.0868 22.9935C62.9832 22.4141 62.8018 21.9157 62.5426 21.4983C62.2835 21.0723 61.938 20.7443 61.5061 20.5143C61.0742 20.2757 60.5213 20.1564 59.8475 20.1564C59.1824 20.1564 58.6296 20.2757 58.189 20.5143C57.7485 20.7528 57.3943 21.0851 57.1266 21.5111C56.8674 21.9285 56.6817 22.4269 56.5694 23.0062C56.4658 23.5771 56.4139 24.1947 56.4139 24.8593C56.4139 25.4471 56.5176 25.9455 56.7249 26.3545C56.9322 26.7549 57.2216 27.0829 57.593 27.3385C57.9645 27.5855 58.3964 27.7644 58.8887 27.8752C59.3897 27.986 59.9339 28.0413 60.5213 28.0413H63.2812ZM59.8475 18.5846C60.7373 18.6187 61.5017 18.7933 62.141 19.1085C62.7802 19.4238 63.2984 19.8583 63.6958 20.412C64.1018 20.9573 64.3998 21.609 64.5898 22.3673C64.7799 23.117 64.8749 23.9477 64.8749 24.8593V28.0413H67.0776V29.6132H64.8749V29.8304C64.8749 30.955 64.6762 31.9476 64.2789 32.808C63.8902 33.6685 63.32 34.3884 62.5685 34.9678C61.817 35.5471 60.9187 35.9731 59.8735 36.2457C58.8369 36.5268 57.701 36.6674 56.4658 36.6674H55.7272V35.0956H56.4658C57.511 35.07 58.4482 34.9678 59.2774 34.7889C60.1153 34.6099 60.828 34.3118 61.4154 33.8943C62.0027 33.4768 62.4562 32.9188 62.7758 32.2202C63.0955 31.5301 63.2639 30.6611 63.2812 29.6132H60.327C59.6014 29.6132 58.906 29.5195 58.2409 29.332C57.5757 29.1446 56.984 28.855 56.4658 28.4631C55.9561 28.0626 55.5544 27.5642 55.2608 26.9679C54.9671 26.363 54.8202 25.6601 54.8202 24.8593C54.8202 23.9562 54.9109 23.1298 55.0923 22.3801C55.2823 21.6218 55.576 20.9701 55.9734 20.4248C56.3794 19.871 56.8977 19.4365 57.5282 19.1213C58.1675 18.7976 58.9406 18.6187 59.8475 18.5846Z"
        fill="#4B416A"
      />
      <path
        d="M72.9917 18.7124C73.2595 18.7124 73.6007 18.7635 74.0153 18.8657C74.4386 18.9594 74.9093 19.0872 75.4276 19.2491C75.9459 19.411 76.4944 19.5984 77.0732 19.8114C77.6519 20.0159 78.2306 20.2331 78.8094 20.4631C79.3881 20.6847 79.9496 20.9062 80.4938 21.1277C81.038 21.3492 81.5347 21.5537 81.9839 21.7411C82.4417 21.9285 82.8304 22.0904 83.15 22.2267C83.4783 22.3545 83.7115 22.444 83.8497 22.4951L84.07 23.9136C83.2148 24.527 82.4201 25.0935 81.6859 25.6132C80.9516 26.1329 80.2174 26.6058 79.4832 27.0318C78.7489 27.4492 77.9888 27.8198 77.2027 28.1436C76.4167 28.4673 75.5442 28.7399 74.5854 28.9614C73.6266 29.1744 72.5555 29.3363 71.372 29.4471C70.1886 29.5578 68.5776 29.6132 66.5391 29.6132V28.0413H67.0185C68.6079 28.0413 69.8863 28.003 70.8538 27.9263C71.8299 27.8496 72.7369 27.7304 73.5747 27.5685C74.4213 27.3981 75.1987 27.1851 75.907 26.9295C76.624 26.6739 77.3237 26.3715 78.0061 26.0222C78.6885 25.6729 79.3752 25.281 80.0662 24.8465C80.7659 24.4035 81.5174 23.9136 82.3208 23.3769C81.7247 23.1553 81.1071 22.9253 80.4679 22.6868C79.8373 22.4482 79.2111 22.2139 78.5891 21.9839C77.9672 21.7539 77.3625 21.5366 76.7751 21.3321C76.1878 21.1277 75.6479 20.9488 75.1555 20.7954C74.6631 20.6335 74.2269 20.51 73.8468 20.4248C73.4754 20.3311 73.186 20.2842 72.9787 20.2842C72.4345 20.2842 71.9422 20.4972 71.5016 20.9232C71.0697 21.3492 70.7544 21.9413 70.5557 22.6995L69.0139 22.3034C69.1434 21.8092 69.3248 21.3449 69.5581 20.9104C69.7999 20.4759 70.0893 20.0968 70.4262 19.7731C70.7631 19.4493 71.1431 19.1937 71.5664 19.0063C71.9983 18.8103 72.4734 18.7124 72.9917 18.7124ZM70.789 13.4984L72.4475 11.8371L74.1578 13.5239L72.4734 15.1853L70.789 13.4984Z"
        fill="#4B416A"
      />
    </svg>
  );
  const rulsSvgv = (
    <svg
      width="20"
      height="21"
      viewBox="0 0 20 21"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <rect y="0.0989075" width="20" height="20" rx="4" fill="#FDFDFD" />
      <rect x="5" y="5.09891" width="10" height="10" rx="2" fill="#A698CF" />
    </svg>
  );
  const loadingIoSvg = (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      style={{
        background: "transparent",
        display: "block",
        shapeRendering: "auto",
        animationPlayState: "running",
        animationDelay: "0s",
        paddingTop: "50px",
        marginTop: "-50px",
      }}
      width="200px"
      height="110px"
      viewBox="0 0 100 100"
      preserveAspectRatio="xMidYMid"
    >
      <circle
        cx="84"
        cy="50"
        r="10"
        fill="#ffffff"
        style={{ animationPlayState: "running", animationDelay: "0s" }}
      >
        <animate
          attributeName="r"
          repeatCount="indefinite"
          dur="0.25s"
          calcMode="spline"
          keyTimes="0;1"
          values="10;0"
          keySplines="0 0.5 0.5 1"
          begin="0s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
        <animate
          attributeName="fill"
          repeatCount="indefinite"
          dur="1s"
          calcMode="discrete"
          keyTimes="0;0.25;0.5;0.75;1"
          values="#ffffff;#ffffff;#ffffff;#ffffff;#ffffff"
          begin="0s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
      </circle>
      <circle
        cx="16"
        cy="50"
        r="10"
        fill="#ffffff"
        style={{ animationPlayState: "running", animationDelay: "0s" }}
      >
        <animate
          attributeName="r"
          repeatCount="indefinite"
          dur="1s"
          calcMode="spline"
          keyTimes="0;0.25;0.5;0.75;1"
          values="0;0;10;10;10"
          keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1"
          begin="0s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
        <animate
          attributeName="cx"
          repeatCount="indefinite"
          dur="1s"
          calcMode="spline"
          keyTimes="0;0.25;0.5;0.75;1"
          values="16;16;16;50;84"
          keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1"
          begin="0s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
      </circle>
      <circle
        cx="50"
        cy="50"
        r="10"
        fill="#ffffff"
        style={{ animationPlayState: "running", animationDelay: "0s" }}
      >
        <animate
          attributeName="r"
          repeatCount="indefinite"
          dur="1s"
          calcMode="spline"
          keyTimes="0;0.25;0.5;0.75;1"
          values="0;0;10;10;10"
          keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1"
          begin="-0.25s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
        <animate
          attributeName="cx"
          repeatCount="indefinite"
          dur="1s"
          calcMode="spline"
          keyTimes="0;0.25;0.5;0.75;1"
          values="16;16;16;50;84"
          keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1"
          begin="-0.25s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
      </circle>
      <circle
        cx="84"
        cy="50"
        r="10"
        fill="#ffffff"
        style={{ animationPlayState: "running", animationDelay: "0s" }}
      >
        <animate
          attributeName="r"
          repeatCount="indefinite"
          dur="1s"
          calcMode="spline"
          keyTimes="0;0.25;0.5;0.75;1"
          values="0;0;10;10;10"
          keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1"
          begin="-0.5s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
        <animate
          attributeName="cx"
          repeatCount="indefinite"
          dur="1s"
          calcMode="spline"
          keyTimes="0;0.25;0.5;0.75;1"
          values="16;16;16;50;84"
          keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1"
          begin="-0.5s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
      </circle>
      <circle
        cx="16"
        cy="50"
        r="10"
        fill="#ffffff"
        style={{ animationPlayState: "running", animationDelay: "0s" }}
      >
        <animate
          attributeName="r"
          repeatCount="indefinite"
          dur="1s"
          calcMode="spline"
          keyTimes="0;0.25;0.5;0.75;1"
          values="0;0;10;10;10"
          keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1"
          begin="-0.75s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
        <animate
          attributeName="cx"
          repeatCount="indefinite"
          dur="1s"
          calcMode="spline"
          keyTimes="0;0.25;0.5;0.75;1"
          values="16;16;16;50;84"
          keySplines="0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1;0 0.5 0.5 1"
          begin="-0.75s"
          style={{ animationPlayState: "running", animationDelay: "0s" }}
        />
      </circle>
    </svg>
  );

  function inputHandler(event) {
    setInputValue(event.target.value);
  }

  async function sendSMShandler() {
    setLoadingIo2(true);
    const response = await fetch("/api/login", {
      method: "POST",
      body: JSON.stringify({ mobile: inputValue }),
      headers: {
        "Content-Type": "application/json",
      },
    });

    const result = await response.json();

    if (result == 200) {
      setIsCodeSend(true);
    } else if (result == 400) {
      setIsCodeSend(false);
    }

    setTimeToShowResend();
    setLoadingIo2(false);

    console.log(result);
  }

  async function confirmUserHandler() {
    setLoadingIo(true);
    const inoutE1Val = inputE1.current.value;
    const inoutE2Val = inputE2.current.value;
    const inoutE3Val = inputE3.current.value;
    const inoutE4Val = inputE4.current.value;
    const inoutE5Val = inputE5.current.value;
    const mobileCode =
      inoutE1Val + inoutE2Val + inoutE3Val + inoutE4Val + inoutE5Val;
    const inputsData = {
      mobileCode: mobileCode,
      userMobileNumber: inputValue,
    };
    const response = await fetch("/api/confirmUser", {
      method: "POST",
      body: JSON.stringify(inputsData),
      headers: {
        "Content-Type": "application/json",
      },
    });

    const result = await response.json();

    if (result) {
      const customer_mobile = result;
      // for now 1500. must correct later
      var inFifteenMinutes = new Date(new Date().getTime() + 15 * 60 * 1000);
      Cookies.set("customer", customer_mobile, { expires: inFifteenMinutes });
      router.back();
      console.log(result);
    } else {
      setLoadingIo(false);
      notify();
    }
  }

  function handleVFinput(event, id, id2) {
    const inputVal = event.target.value;

    if (inputVal !== "") {
      document.getElementById(id).focus();
    } else if (inputVal == "") {
      document.getElementById(id2).focus();
    }
  }

  useEffect(() => {
    inputE1.current.focus();
  }, [isCodeSend]);

  function setTimeToShowResend() {
    myTimeout = setTimeout(changResendHandler, 20000);
  }

  function changResendHandler() {
    setIsResendOpen(true);
    clearTimeout(myTimeout);
  }

  return (
    <div className={styles.login_container}>
      <div>
        <div>{Logo}</div>
      </div>
      <div>
        <p>خوش آمدید!</p>
      </div>
      <div>
        <p>
          از طریق شماره تلفن همراه وارد سایت شوید و از خرید محصولات باکیفیت لذت
          ببرید
        </p>
      </div>
      <div>
        <input
          type={"tel"}
          placeholder="شماره تلفن"
          onChange={inputHandler}
          className={
            isCodeSend === false ? undefined : styles.mobile_input_hide
          }
        />
        <div
          className={
            isCodeSend === false
              ? styles.verfication_inputs_container
              : `${styles.verfication_inputs_container} ${styles.verfication_inputs_show}`
          }
        >
          <input
            type={"text"}
            onChange={(e) => handleVFinput(e, 2, 1)}
            maxLength="1"
            id="1"
            ref={inputE1}
          />
          <input
            type={"text"}
            onChange={(e) => handleVFinput(e, 3, 1)}
            maxLength="1"
            id="2"
            ref={inputE2}
          />
          <input
            type={"text"}
            onChange={(e) => handleVFinput(e, 4, 2)}
            maxLength="1"
            id="3"
            ref={inputE3}
          />
          <input
            type={"text"}
            onChange={(e) => handleVFinput(e, 5, 3)}
            maxLength="1"
            id="4"
            ref={inputE4}
          />
          <input
            type={"text"}
            onChange={(e) => handleVFinput(e, 5, 4)}
            maxLength="1"
            id="5"
            ref={inputE5}
          />
        </div>
      </div>
      <div>
        <button
          className={
            isCodeSend === false
              ? styles.confirm_mobile
              : `${styles.confirm_mobile} ${styles.confirm_mobile_show}`
          }
          onClick={confirmUserHandler}
        >
          {loadingIo ? loadingIoSvg : "تایید"}
        </button>
        <button
          className={
            isCodeSend === false
              ? styles.send_mobile
              : `${styles.send_mobile} ${styles.send_mobile_hide}`
          }
          onClick={sendSMShandler}
        >
          {loadingIo2 ? loadingIoSvg : "ورود"}
        </button>
        <button>
          {rulsSvgv} <p>قوانین و ضوابط</p>
        </button>
      </div>
      <div
        style={{
          display:
            isCodeSend == false || isResendOpen == false ? "none" : undefined,
        }}
      >
        <p aria-label="resend-code-title">کد را دریافت نکردید؟</p>
        <div>
          <p onClick={sendSMShandler}>ارسال مجدد کد</p>
          <p onClick={() => setIsCodeSend(false)}>تغییر شماره موبایل</p>
        </div>
      </div>
    </div>
  );
}

export default Login;

Login.getLayout = function PageLayout(page) {
  return <>{page}</>;
};
